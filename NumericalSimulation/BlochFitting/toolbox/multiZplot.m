function [GUESSmat]=multiZplot(P,Sim,T,w_x,Z_x,popt,pci)
%MULTIZFIT simultaneous multiple Z-spectra plotting, e.g. Z(B1)
%
% GUESSmat = multiZplot(P,Sim,T,w_x,Z_x,popt,pci)
% simulated and plots multiple Z-spectra generated by parameters P, Sim and T
% using Bloch-McConnell solutions
% if given, the function plots also acquired multi-Z-spectra  w_x,Z_x
% if an optimized parameter vector popt and pci is given the guess from P
% and Sim is not displayed, insted the fitted function is displayed.
% if given the input parameters P, Sim, T, and popt are displayed in the
% figure as well
% Please note: If parameters are given in  Sim, P, and T, they are overwritten in
% the follwing order: Sim - P - T, so T is strongest, Sim is weakest
%
% eg. if Sim.R1A=1; and P.R1A=2; and
%   T.varyA: [1 1]; T.dep_varsA: {'dwA'  'R1A'}; T.startA: [0 3];
% then the actual used R1A would be 3
% if T.varyA: [1 0]; T.dep_varsA: {'dwA'  'R1A'}; T.startA: [0 3];
% then the actual used R1A would be 2
% if R1A is not given in P nor T
% then the actual used R1A would be 1
%
% INPUT:
% P measurmenet parameters
% Sim simulation parameters
% T fit starting values and boundaries
% w_x   frequency axis vector in ppm (optional)
% Z_x   multi-B1 Z-spectrum stack Z_x(w_x,B1) (optional)
% popt  optimized parameter vector from multiZfit (optional)
% pci   optimized parameter confidence interval vector from multiZfit (optional)
%
% OUTPUT:
% GUESSmat is the simulated multi-Zspectra stack, if popt was given it is the fitted multi-Zspectra stack
%
%   Examples:
%   multiZplot(P,Sim,T) % plots the initial guess
%
%   multiZplot(P,Sim,T,w_x,Z_x) % plots the initial guess together with the
%   data and difference
%
%   multiZplot(P,Sim,T,w_x,Z_x,popt,pci) % plots the data and the fit with
%   residuals
%
%   See also MULTIZFIT, QUESP_and_QUEST_evaluations, norm_run,
%   exclude_run, b0correct_run

%   Version: see git repository www.cest-sources.org
%   Authors: Moritz Zaiss  - moritz.zaiss@tuebingen.mpg.de
%   Magentic Resonance Renter
%   Max-Planck institute of biological cybernetics Tübingen, Germany,
%   http://www.kyb.tuebingen.mpg.de/nc/de/mitarbeiter/details/mzaiss.html
%   CEST sources - Copyright (C) 2017  Moritz Zaiss
%   **********************************
%   This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or(at your option) any later version.
%    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
%    You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
%   **********************************


PP = catstruct(Sim,P);

if nargin<4
    w_x=PP.xZspec;
end;



subplot(2,1,1);


% determine which case (--> parameters) is used
[dep_vars, startValue, lowerbounds, upperbounds] = casedetermination(PP,T);


if nargin>5 % this means a popt is given
    pp=popt;
else
    pp=startValue;
    pci=0*pp;
end;

% plot your measured and simulated data (uses starting point values)
if PP.analytic
    GUESS = conv_ana(pp,PP.xZspec,PP,dep_vars,PP.vary,PP.varyval);
else
    GUESS = conv_num(pp,PP.xZspec,PP,dep_vars,PP.vary,PP.varyval);
end

% plot "1st-guess" with deviations from data points

GUESSmat=reshape(GUESS,numel(PP.xZspec),size(PP.varyval,2));
plot(PP.xZspec,GUESSmat,'-');
clear leg;


if iscell(PP.vary)
    PP.vary=PP.vary{1};
end;

for ii=1:size(PP.varyval,2)
    
    leg{ii} = (sprintf('%s=%.2f ',PP.vary,PP.varyval(:,ii)));
end;
legend(leg);
xlabel('\Delta\omega [ppm]');
title(sprintf('Simulated data kBA: %.2f, fB: %7f',PP.kBA,PP.fB), 'Interpreter', 'none');

set(gca,'XDir','reverse');
ax = gca; ax.ColorOrderIndex = 1;

if nargin>3
    hold on;
    plot(w_x,Z_x,'.');
    ax = gca; ax.ColorOrderIndex = 1;
    plot(w_x,Z_x-GUESSmat,'-');
end;

%% annotation

% fixed SIM params
lab2=evalc('Sim');
txt = uicontrol('Style','text','Units','normalized','Position',[0.0, 0, 0.25, 0.45],...
    'String','fixed simulation parameters');

txt = uicontrol('Style','edit','Units','normalized', ...
    'Position',[0.0, 0, 0.25, 0.4],...
    'String',lab2,'max', numel(startValue)+1 );

clear Pfield lab2;

% fixed P  params

lab2=evalc('P');



txt = uicontrol('Style','text','Units','normalized','Position',[0.25, 0, 0.25, 0.45],...
    'String','fixed measurement parameters');

txt = uicontrol('Style','edit','Units','normalized', ...
    'Position',[0.25, 0, 0.25, 0.4],...
    'String',lab2,'max', numel(startValue)+1 );

clear Pfield lab2;




% start params

for ii=1:numel(startValue)
    lab{ii} = sprintf('%s=%.4f (%f |%f) ',dep_vars{ii},startValue(ii),lowerbounds(ii),upperbounds(ii));
end;

% Add a text uicontrol to label the slider.
txt = uicontrol('Style','text','Units','normalized','Position',[0.5, 0, 0.25, 0.45],...
    'String','free fit parameters and startvalues');

txt = uicontrol('Style','edit','Units','normalized', ...
    'Position',[0.5, 0, 0.25, 0.4],...
    'String',lab,'max', numel(startValue)+1 );

% fitted params



if nargin>5 % this means a popt is given
    
    [Label, Unit]=getSimLabelUnit();
    for ii=1:numel(popt)
        lab{ii} = (sprintf('%s=%.4f',dep_vars{ii},popt(ii)));
        lab{ii} = (sprintf('%s=%.7f±%.7f %s',dep_vars{ii},popt(ii),pci(ii),Unit.(dep_vars{ii})));
        %     lab{ii} = (sprintf('%s=%s %s',dep_vars{ii},errorbar_str(popt(ii),pci(ii)),Unit.(dep_vars{ii})));
        
    end;
    
    % Add a text uicontrol to label the slider.
    txt = uicontrol('Style','text','Units','normalized','Position',[0.75, 0, 0.25, 0.45],...
        'String','fitted parameters');
    
    txt = uicontrol('Style','edit','Units','normalized', ...
        'Position',[0.75, 0, 0.25, 0.4],...
        'String',lab,'max', numel(startValue)+1 );
end;

if size(P.varyval,2)>1 && exist('Z_x') 
    nB1pH=numel(P.varyval(1,:));
    nB1=numel(unique(P.varyval(1,:)));
    npH=numel(P.varyval(1,:))/numel(unique(P.varyval(1,:)));
    
    if npH>1
        
        GUESSmat3D=reshape(GUESS,numel(w_x),nB1,npH);
        Z_xmat3D=reshape(Z_x(:),numel(w_x),nB1,npH);
        figure,
        for ii=1:npH
            subplot(2,7,ii),
            plot(w_x,GUESSmat3D(:,:,ii),'-');
            
            hold on;
            ax = gca; ax.ColorOrderIndex = 1;
            plot(w_x,Z_xmat3D(:,:,ii),'.-');
            ax = gca; ax.ColorOrderIndex = 1;
            plot(w_x,Z_xmat3D(:,:,ii)-GUESSmat3D(:,:,ii),'-');
            xlabel('\Delta\omega [ppm]');
            set(gca,'XDir','reverse');
            set(gca,'XLim',[-4 4]);
            set(gca,'YLim',[0.5 1]);
        end;
        
        tSim=PP;
        
        for T=[25 37];
        tSim.T=T;
        tSim.pH=5.5:0.1:7.4;
        uSim=tSim;
        for jj = 1:numel(pp) % thsi realizes multiple varying parameters
            tSim.(dep_vars{jj}) = pp(jj);
            uSim.(dep_vars{jj}) = pp(jj)+sign(pp(jj))*abs(pci(jj));
        end;
        
        
        [tSim] =get_BMrelations(tSim);
        [uSim] =get_BMrelations(uSim);
        
        figure,
        subplot(1,2,1),
        
        hold on, 
        errorbar(tSim.pH,tSim.kBA,uSim.kBA-tSim.kBA,'.-','Displayname','kBA'); xlabel('pH');
        errorbar(tSim.pH,tSim.kDA,uSim.kDA-tSim.kDA,'.-','Displayname','kDA'); xlabel('pH');
        errorbar(tSim.pH,tSim.kEA,uSim.kEA-tSim.kEA,'.-','Displayname','kEA'); xlabel('pH');
        errorbar(tSim.pH,tSim.kFA,uSim.kFA-tSim.kFA,'.-','Displayname','kFA'); xlabel('pH');
        
        subplot(1,2,2),
        errorbar(tSim.pH,tSim.R2A,uSim.R2A-tSim.R2A,'.-','Displayname','R2A'); xlabel('pH');
        hold on, errorbar(tSim.pH,tSim.anomer,uSim.anomer-tSim.anomer,'.-','Displayname','anomer'); xlabel('pH');
        end;
        
    end;
end;
%%
% x=[1 1 1 1 1 1];
% xx=[1*x 2*x 3*x 4*x 5*x 6*x 7*x 8*x 9*x 10*x 11*x 12*x 13*x 14*x]
% xx=xx(end:-1:1),
% [X,Y] = meshgrid( xx ,w_x)
% 
% figure,plot3(X,Y,Z_x,'.'); hold on;
% plot3(X,Y,FIT.Zfit)
% set(gca,'Zlim',[0.8 1.2]);
% set(gca,'Ylim',[-5 5]);
% set(gca,'Xlim',[1 15.2]);
